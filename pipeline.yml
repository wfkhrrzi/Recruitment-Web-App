variables:
  service_connection: 'dssandbox-spn'
  resource_group: 'PTAZSG-DEV-DSP-RG'
  app_name: 'ptsg-5dspwb04'
  slot_name: 'dstats'

pool:
  vmImage: ubuntu-latest

## No code trigger (events )
trigger: 
  branches:
    include:
    - deploy_v1

## Pipeline steps
steps:
  - task: UsePythonVersion@0
    displayName: "Setting Python version"
    inputs:
      versionSpec: '3.9'
      # architecture: 'x64'
      addToPath: true

  # Step 1, Make a venv, activate, install requirements, run collectstatic
  - script: |
      python -m venv .venv
      source .venv/bin/activate
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      echo "Dependencies installation completed"
      cd recruitment
      python manage.py collectstatic
      echo "Collectstatic completed"      
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    displayName: "Install requirements"
    
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'  # Root folder
      Contents: 'requirements.txt'  # File to copy
      TargetFolder: '$(System.DefaultWorkingDirectory)/recruitment'  # Destination subfolder


   # Step 2, create zip file be deployed
  - task: ArchiveFiles@2
    displayName: "Archive files"
    inputs:
      rootFolderOrFile: "$(System.DefaultWorkingDirectory)/recruitment"
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'drop'
    displayName: 'Publish build artifacts'


  
  # Step 3, deploy zip package to azure app service
  - task: AzureRmWebAppDeployment@4
    inputs:
      azureSubscription: $(service_connection)
      appType: 'webAppLinux'
      WebAppName: $(app_name)
      deployToSlotOrASE: true
      ResourceGroupName: $(resource_group)
      SlotName: $(slot_name)
      # packageForLinux:  '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      packageForLinux:  '$(Build.ArtifactStagingDirectory)/**/*.zip'
      RuntimeStack: 'PYTHON|3.9'
      DeploymentType: 'zipDeploy'
      StartUpCommand: "gunicorn --bind=0.0.0.0:8080 --timeout 600 recruitment.wsgi --access-logfile '-' --error-logfile '-'"
      # StartUpCommand: "python manage.py runserver"
      AppSettings: '-Port 8080 -RequestTimeout "10:20:00" -WEBSITE_TIME_ZONE "Singapore Standard Time" -WEBSITES_PORT 8080 -WEBSITES_ENABLE_APP_SERVICE_STORAGE 1 -SCM_DO_BUILD_DURING_DEPLOYMENT 1 -ENABLE_ORYX_BUILD 1'
      # timeoutInMinutes: 60 # Set the timeout to 60 minutes
